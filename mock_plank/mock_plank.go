// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_plank is a generated GoMock package.
package mock_plank

import (
	plank "github.com/armory/plank"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPlankClient is a mock of PlankClient interface
type MockPlankClient struct {
	ctrl     *gomock.Controller
	recorder *MockPlankClientMockRecorder
}

// MockPlankClientMockRecorder is the mock recorder for MockPlankClient
type MockPlankClientMockRecorder struct {
	mock *MockPlankClient
}

// NewMockPlankClient creates a new mock instance
func NewMockPlankClient(ctrl *gomock.Controller) *MockPlankClient {
	mock := &MockPlankClient{ctrl: ctrl}
	mock.recorder = &MockPlankClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlankClient) EXPECT() *MockPlankClientMockRecorder {
	return m.recorder
}

// GetApplication mocks base method
func (m *MockPlankClient) GetApplication(arg0 string) (*plank.Application, error) {
	ret := m.ctrl.Call(m, "GetApplication", arg0)
	ret0, _ := ret[0].(*plank.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockPlankClientMockRecorder) GetApplication(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockPlankClient)(nil).GetApplication), arg0)
}

// GetApplications mocks base method
func (m *MockPlankClient) GetApplications() (*[]plank.Application, error) {
	ret := m.ctrl.Call(m, "GetApplications")
	ret0, _ := ret[0].(*[]plank.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplications indicates an expected call of GetApplications
func (mr *MockPlankClientMockRecorder) GetApplications() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplications", reflect.TypeOf((*MockPlankClient)(nil).GetApplications))
}

// CreateApplication mocks base method
func (m *MockPlankClient) CreateApplication(arg0 *plank.Application) error {
	ret := m.ctrl.Call(m, "CreateApplication", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockPlankClientMockRecorder) CreateApplication(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockPlankClient)(nil).CreateApplication), arg0)
}

// IsAdmin mocks base method
func (m *MockPlankClient) IsAdmin(arg0 string) (bool, error) {
	ret := m.ctrl.Call(m, "IsAdmin", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin
func (mr *MockPlankClientMockRecorder) IsAdmin(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockPlankClient)(nil).IsAdmin), arg0)
}

// HasAppWriteAccess mocks base method
func (m *MockPlankClient) HasAppWriteAccess(arg0, arg1 string) (bool, error) {
	ret := m.ctrl.Call(m, "HasAppWriteAccess", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasAppWriteAccess indicates an expected call of HasAppWriteAccess
func (mr *MockPlankClientMockRecorder) HasAppWriteAccess(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAppWriteAccess", reflect.TypeOf((*MockPlankClient)(nil).HasAppWriteAccess), arg0, arg1)
}

// GetUser mocks base method
func (m *MockPlankClient) GetUser(arg0 string) (*plank.User, error) {
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*plank.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockPlankClientMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockPlankClient)(nil).GetUser), arg0)
}

// GetPipeline mocks base method
func (m *MockPlankClient) GetPipeline(arg0, arg1 string) (*plank.Pipeline, error) {
	ret := m.ctrl.Call(m, "GetPipeline", arg0, arg1)
	ret0, _ := ret[0].(*plank.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline
func (mr *MockPlankClientMockRecorder) GetPipeline(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockPlankClient)(nil).GetPipeline), arg0, arg1)
}

// GetPipelines mocks base method
func (m *MockPlankClient) GetPipelines(arg0 string) ([]plank.Pipeline, error) {
	ret := m.ctrl.Call(m, "GetPipelines", arg0)
	ret0, _ := ret[0].([]plank.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelines indicates an expected call of GetPipelines
func (mr *MockPlankClientMockRecorder) GetPipelines(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelines", reflect.TypeOf((*MockPlankClient)(nil).GetPipelines), arg0)
}

// UpsertPipeline mocks base method
func (m *MockPlankClient) UpsertPipeline(arg0 plank.Pipeline) error {
	ret := m.ctrl.Call(m, "UpsertPipeline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPipeline indicates an expected call of UpsertPipeline
func (mr *MockPlankClientMockRecorder) UpsertPipeline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPipeline", reflect.TypeOf((*MockPlankClient)(nil).UpsertPipeline), arg0)
}

// DeletePipeline mocks base method
func (m *MockPlankClient) DeletePipeline(arg0 plank.Pipeline) error {
	ret := m.ctrl.Call(m, "DeletePipeline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipeline indicates an expected call of DeletePipeline
func (mr *MockPlankClientMockRecorder) DeletePipeline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockPlankClient)(nil).DeletePipeline), arg0)
}

// DeletePipelineByName mocks base method
func (m *MockPlankClient) DeletePipelineByName(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "DeletePipelineByName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipelineByName indicates an expected call of DeletePipelineByName
func (mr *MockPlankClientMockRecorder) DeletePipelineByName(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipelineByName", reflect.TypeOf((*MockPlankClient)(nil).DeletePipelineByName), arg0, arg1)
}

// Execute mocks base method
func (m *MockPlankClient) Execute(arg0, arg1 string) (*plank.PipelineRef, error) {
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(*plank.PipelineRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockPlankClientMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPlankClient)(nil).Execute), arg0, arg1)
}

// GetTask mocks base method
func (m *MockPlankClient) GetTask(arg0 string) (*plank.ExecutionStatusResponse, error) {
	ret := m.ctrl.Call(m, "GetTask", arg0)
	ret0, _ := ret[0].(*plank.ExecutionStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask
func (mr *MockPlankClientMockRecorder) GetTask(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockPlankClient)(nil).GetTask), arg0)
}

// PollTaskStatus mocks base method
func (m *MockPlankClient) PollTaskStatus(arg0 string) (*plank.ExecutionStatusResponse, error) {
	ret := m.ctrl.Call(m, "PollTaskStatus", arg0)
	ret0, _ := ret[0].(*plank.ExecutionStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PollTaskStatus indicates an expected call of PollTaskStatus
func (mr *MockPlankClientMockRecorder) PollTaskStatus(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollTaskStatus", reflect.TypeOf((*MockPlankClient)(nil).PollTaskStatus), arg0)
}

// CreateTask mocks base method
func (m *MockPlankClient) CreateTask(arg0, arg1 string, arg2 interface{}) (*plank.TaskRefResponse, error) {
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(*plank.TaskRefResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask
func (mr *MockPlankClientMockRecorder) CreateTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockPlankClient)(nil).CreateTask), arg0, arg1, arg2)
}
